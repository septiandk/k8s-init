- hosts: masters[0]
  become: true
  tasks:
    - name: Check if Kubernetes is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_initialized

    - name: Print cluster existence check
      debug:
        msg: "Kubernetes already initialized: {{ kubeadm_initialized.stat.exists }}"

    - name: Initialize Kubernetes master (with load balancer)
      command: >
        kubeadm init
        --control-plane-endpoint={{ cluster_endpoint }}
        --apiserver-advertise-address={{ ansible_host }}
        --pod-network-cidr={{ pod_cidr }}
      when:
        - use_loadbalancer | default(false)
        - not kubeadm_initialized.stat.exists
      register: init_output
      ignore_errors: true

    - name: Initialize Kubernetes master (no load balancer)
      command: >
        kubeadm init
        --apiserver-advertise-address={{ ansible_host }}
        --pod-network-cidr={{ pod_cidr }}
      when:
        - not use_loadbalancer | default(false)
        - not kubeadm_initialized.stat.exists
      register: init_output_no_lb
      ignore_errors: true

    - name: Print kubeadm init output 
      debug:
        msg: >
          {%- if use_loadbalancer | default(false) -%}
          {{ init_output }}
          {%- else -%}
          {{ init_output_no_lb }}
          {%- endif -%}

    - name: Create kube config dir
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: 0755
      register: kube_dir_output

    - name: Print kube config dir creation process
      debug:
        msg: "Kube config directory creation output: {{ kube_dir_output }}"

    - name: Copy admin.conf
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: true
        owner: root
        group: root
        mode: 0644
      register: copy_admin_conf_output

    - name: Print admin.conf copy process
      debug:
        msg: "Copy admin.conf output: {{ copy_admin_conf_output }}"
    
    - name: Export KUBECONFIG variable
      shell: echo "export KUBECONFIG=/root/.kube/config" >> /root/.bashrc
      register: export_kubeconfig_output

    - name: Apply Flannel network
      become: true
      command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      register: flannel_output
      ignore_errors: true
      
    - name: Print Flannel network application process
      debug:
        msg: "Flannel network application output: {{ flannel_output.stdout }}"
    
    - name: install helm 
      command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      register: helm_output
      ignore_errors: true
    
    - name: Print helm installation process
      debug:
        msg: "Helm installation output: {{ helm_output.stdout }}"

    - name: install kubectx
      command: snap install kubectx --classic
      when: ansible_distribution == "Ubuntu"
      register: kubectx_output
      ignore_errors: true

    - name: Print kubectx installation process
      debug:
        msg: "Kubectx installation output: {{ kubectx_output.stdout }}"

    - name: check cluster status
      command: kubectl get nodes
      register: cluster_status_output
      ignore_errors: true

    - name: Print cluster status
      debug:
        msg: "Cluster status output: {{ cluster_status_output.stdout }}"
