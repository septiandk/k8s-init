- hosts: masters[0]
  become: true
  tasks:
    - name: Unhold Kubernetes packages
      shell: |
        apt-mark unhold kubelet kubeadm kubectl
      ignore_errors: true

    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ new_kubernetes_version }}/deb/Release.key | \
        gpg --dearmor | tee /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ new_kubernetes_version }}/deb/ /

    - name: Update apt cache
      apt:
        update_cache: true

    - name: Get available kubeadm versions
      shell: "apt-cache madison kubeadm | awk 'NR==1 { print $3; exit }'"
      register: kubeadm_version
      changed_when: false

    - name: Get available kubelet versions
      shell: "apt-cache madison kubelet | awk 'NR==1 { print $3; exit }'"
      register: kubelet_version
      changed_when: false

    - name: Get available kubectl versions
      shell: "apt-cache madison kubectl | awk 'NR==1 { print $3; exit }'"
      register: kubectl_version
      changed_when: false

    - name: Upgrade kubeadm on master nodes
      apt:
        name: "kubeadm={{ kubeadm_version.stdout }}"
        state: present
        update_cache: true

    - name: Check kubeadm upgrade plan
      command: kubeadm upgrade plan
      register: upgrade_plan_output

    - name: Print upgrade plan output
      debug:
        msg: "{{ upgrade_plan_output.stdout }}"

    - name: Apply kubeadm upgrade
      command: kubeadm upgrade apply v{{ kubeadm_version.stdout | regex_replace('-.*$', '') }} -y
      register: upgrade_apply_output

    - name: Print kubeadm upgrade output
      debug:
        msg: "{{ upgrade_apply_output.stdout }}"

    - name: Upgrade kubelet and kubectl on master nodes
      apt:
        name:
          - "kubelet={{ kubelet_version.stdout }}"
          - "kubectl={{ kubectl_version.stdout }}"
        state: present
        update_cache: true

    - name: Restart kubelet service
      service:
        name: kubelet
        state: restarted

    - name: Hold Kubernetes packages
      shell: |
        apt-mark hold kubelet kubeadm kubectl


- hosts: workers
  serial: 1  
  become: true
  tasks:
    - name: Drain worker node (run from master)
      delegate_to: "{{ groups['masters'][0] }}"
      command: kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-emptydir-data
      when: inventory_hostname != groups['masters'][0]

    - name: Unhold Kubernetes packages
      shell: |
        apt-mark unhold kubelet kubeadm kubectl
      ignore_errors: true

    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ new_kubernetes_version }}/deb/Release.key | \
        gpg --dearmor | tee /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ new_kubernetes_version }}/deb/ /

    - name: Update apt cache
      apt:
        update_cache: true

    - name: Get available kubeadm versions
      shell: "apt-cache madison kubeadm | awk 'NR==1 { print $3; exit }'"
      register: kubeadm_version
      changed_when: false

    - name: Get available kubelet versions
      shell: "apt-cache madison kubelet | awk 'NR==1 { print $3; exit }'"
      register: kubelet_version
      changed_when: false

    - name: Get available kubectl versions
      shell: "apt-cache madison kubectl | awk 'NR==1 { print $3; exit }'"
      register: kubectl_version
      changed_when: false
      
    - name: Upgrade kubeadm on master nodes
      apt:
        name: "kubeadm={{ kubeadm_version.stdout }}"
        state: present
        update_cache: true
  
    - name: Upgrade kubelet and kubectl on master nodes
      apt:
        name:
          - "kubelet={{ kubelet_version.stdout }}"
          - "kubectl={{ kubectl_version.stdout }}"
        state: present
        update_cache: true

    - name: Restart kubelet service
      service:
        name: kubelet
        state: restarted

    - name: Uncordon worker node (run from master)
      delegate_to: "{{ groups['masters'][0] }}"
      command: kubectl uncordon {{ inventory_hostname }}
      when: inventory_hostname != groups['masters'][0]

    - name: Hold Kubernetes packages
      shell: |
        apt-mark hold kubelet kubeadm kubectl
