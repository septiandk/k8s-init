# Section 1: Check and Install Kubernetes Components
- name: Check if kubelet, kubeadm, and kubectl are installed
  shell: |
    which kubelet && which kubeadm && which kubectl
  register: kube_tools_check
  failed_when: false

- name: Skip installation if kubelet, kubeadm, and kubectl are already installed
  debug:
    msg: "kubelet, kubeadm, and kubectl are already installed. Skipping installation."
  when: kube_tools_check.rc == 0

- name: Add Kubernetes GPG key
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key | \
    gpg --dearmor | tee /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    warn: false
  when: kube_tools_check.rc != 0

- name: Add Kubernetes repository
  copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    content: |
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /
  when: kube_tools_check.rc != 0

- name: Install kubelet, kubeadm, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes
  register: kubernetes_install_result
  when: kube_tools_check.rc != 0

- name: Debug Kubernetes installation result
  debug:
    msg: "Installed packages result: {{ kubernetes_install_result }}"
  when: kube_tools_check.rc != 0

# Section 2: Install and Configure CNI Plugins
- name: Check if CNI plugins are present
  command: ls /opt/cni/bin
  register: cni_check
  failed_when: cni_check.rc != 0 and "No such file or directory" not in cni_check.stderr

- name: Clone CNI plugins repository if not present
  git:
    repo: https://github.com/containernetworking/plugins.git
    dest: /opt/plugins
    version: main
  when: cni_check.rc != 0

- name: Parse required Go version from go.mod
  shell: |
    grep -oP 'go [0-9]+\.[0-9]+' /opt/plugins/go.mod | awk '{print $2}'
  register: required_go_version
  when: cni_check.rc != 0

- name: Debug required Go version
  debug:
    msg: "Required Go version: {{ required_go_version.stdout }}"
  when: required_go_version.stdout is defined

- name: Check installed Go version
  shell: go version | awk '{print $3}' | sed 's/go//'
  register: installed_go_version
  failed_when: false

- name: Debug installed Go version
  debug:
    msg: "Installed Go version: {{ installed_go_version.stdout }}"
  when: installed_go_version.stdout is defined

- name: Remove existing Go installation if version mismatch
  shell: |
    apt-get remove --purge -y golang && apt-get autoremove -y
  when: >
    required_go_version.stdout is defined and
    installed_go_version.stdout is defined and
    (installed_go_version.stdout != required_go_version.stdout)

- name: Download and install the required Go version
  block:
    - name: Fetch the latest Go version
      shell: |
        curl -s https://go.dev/dl/ | grep -oP 'go{{ required_go_version.stdout }}[^\"]*' | head -n 1
      register: latest_go_version
      when: required_go_version is defined and required_go_version.stdout is defined

    - name: Download and install the required Go version
      block:
        - name: Download Go tarball
          get_url:
            url: "https://go.dev/dl/{{ latest_go_version.stdout }}.linux-amd64.tar.gz"
            dest: /tmp/{{ latest_go_version.stdout }}.tar.gz
          when: latest_go_version is defined and latest_go_version.stdout is defined

    - name: Extract Go tarball
      unarchive:
        src: /tmp/{{ latest_go_version.stdout }}.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: Add Go binary to PATH 
      shell: ln -s /usr/local/go/bin/go /usr/bin/go
      args:
        warn: false
        
  when: required_go_version.stdout is defined

- name: Validate Go installation
  shell: go version
  register: go_version_check
  failed_when: go_version_check.rc != 0

- name: Debug installed Go version after installation
  debug:
    msg: "Installed Go version after installation: {{ go_version_check.stdout }}"

- name: Build CNI plugins
  shell: |
    cd /opt/plugins
    ./build_linux.sh
  args:
    chdir: /opt/plugins
    warn: false
  when: cni_check.rc != 0

- name: Copy CNI plugins to /opt/cni/bin
  shell: |
    mkdir -p /opt/cni/bin
    cp /opt/plugins/bin/* /opt/cni/bin/
  args:
    warn: false
  when: cni_check.rc != 0

- name: Validate CNI plugins installation
  stat:
    path: /opt/cni/bin/loopback
  register: loopback_plugin

- name: Fail if CNI plugins are not installed
  fail:
    msg: "CNI plugins installation failed. The 'loopback' plugin is missing in /opt/cni/bin."
  when: not loopback_plugin.stat.exists

# Section 3: Install and Configure crictl
- name: Check if crictl is installed
  command: which crictl
  register: crictl_check
  failed_when: false

- name: Install crictl if not present
  shell: |
    VERSION=$(curl -s https://api.github.com/repos/kubernetes-sigs/cri-tools/releases/latest | grep tag_name | cut -d '"' -f 4)
    curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
    sudo tar -C /usr/local/bin -xzf crictl-$VERSION-linux-amd64.tar.gz
    rm -f crictl-$VERSION-linux-amd64.tar.gz
  args:
    warn: false
  when: crictl_check.rc != 0

# Section 4: Finalize Kubernetes Setup
- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable and start kubelet service
  systemd:
    name: kubelet
    enabled: yes
    state: started
