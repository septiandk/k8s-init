- name: Check if kubelet, kubeadm, and kubectl are installed
  shell: |
    which kubelet && which kubeadm && which kubectl
  register: kube_tools_check
  failed_when: false

- name: Skip installation if kubelet, kubeadm, and kubectl are already installed
  debug:
    msg: "kubelet, kubeadm, and kubectl are already installed. Skipping installation."
  when: kube_tools_check.rc == 0

- name: Add Kubernetes GPG key
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key | \
      gpg --dearmor | tee /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    warn: false
  when: kube_tools_check.rc != 0

- name: Add Kubernetes repo
  copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    content: |
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /
  when: kube_tools_check.rc != 0

- name: Install kubelet, kubeadm, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes
  register: kubernetes_install_result
  when: kube_tools_check.rc != 0

- name: Debug install result
  debug:
    msg: "Installed packages result: {{ kubernetes_install_result }}"
  when: kube_tools_check.rc != 0

- name: Check if CNI plugins are present
  command: ls /opt/cni/bin
  register: cni_check
  failed_when: cni_check.rc != 0 and "No such file or directory" not in cni_check.stderr

- name: Ensure Go is installed
  apt:
    name: golang
    state: present
  when: cni_check.rc != 0 or cni_check.stdout == ""

- name: Install CNI plugins from source if not present
  block:
    - name: Clone CNI plugins repository
      shell: |
        git clone https://github.com/containernetworking/plugins /opt/plugins
        cd /opt/plugins
        git checkout $(git tag -l | sort -V | tail -n 1)
      args:
        warn: false

    - name: Determine required Go version from go.mod
      shell: |
        grep -oP 'go[0-9]+\.[0-9]+' /opt/plugins/go.mod | head -n 1 | sed 's/go//'
      register: required_go_version

    - name: Install required Go version
      apt:
        name: "golang-{{ required_go_version.stdout }}"
        state: present
      when: required_go_version.stdout is defined

    - name: Check installed Go version
      shell: |
        go version | awk '{print $3}' | sed 's/go//'
      register: installed_go_version

    - name: Validate Go version
      fail:
        msg: "Go version {{ required_go_version.stdout }} or higher is required. Current version is {{ installed_go_version.stdout }}."
      when: >
        required_go_version.stdout is defined and
        installed_go_version.stdout is defined and
        (installed_go_version.stdout is version(required_go_version.stdout, '<'))

    - name: Build CNI plugins
      shell: |
        cd /opt/plugins
        ./build_linux.sh
      args:
        warn: false

    - name: Copy CNI plugins to /opt/cni/bin
      shell: |
        sudo mkdir -p /opt/cni/bin
        sudo cp /opt/plugins/bin/* /opt/cni/bin/
      args:
        warn: false
  when: cni_check.rc != 0 or cni_check.stdout == ""

- name: Check if crictl is installed
  command: which crictl
  register: crictl_check
  failed_when: false

- name: Install crictl if not present
  shell: |
    VERSION=$(curl -s https://api.github.com/repos/kubernetes-sigs/cri-tools/releases/latest | grep tag_name | cut -d '"' -f 4)
    curl -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
    sudo tar -C /usr/local/bin -xzf crictl-$VERSION-linux-amd64.tar.gz
    rm -f crictl-$VERSION-linux-amd64.tar.gz
  args:
    warn: false
  when: crictl_check.rc != 0

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable kubelet
  systemd:
    name: kubelet
    enabled: yes
    state: started
